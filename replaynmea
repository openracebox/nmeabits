#!/usr/bin/env python3
"""
Replay an NMEA data log file.

Used for simulating being at sea, while in fact sitting comfortably in your office chair!

Author: Lasse Karstensen <lasse.karstensen@gmail.com>, July 2013.
"""

import argparse
import gzip
import logging
import socket
import sys

from datetime import datetime
from time import sleep, time
from os.path import realpath, dirname
from os import getenv

def main(args):
    logging.info("Starting up")

    # The $GPRMC message is time stamped, and from the logs we
    # output it every 2 seconds. Pace our replayed output by this.
    last_GPRMC = None

    fp = None
    sock = None

    while True:
        if not fp:
            if ".gz" in args.input:
                fp = gzip.open(args.input, "rt")
            else:
                fp = open(args.input, "rt")

            if args.skip:
                logging.info("Forwarding %i bytes" % args.skip)
                fp.seek(skip)
                fp.readline()

        while sock is None:
            logging.info("Connecting to tcp://%s:%s/" % (args.server_host, args.server_port))
            try:
                sock = socket.create_connection((args.server_host, args.server_port), timeout=10.0)
            except socket.error as e:
                logging.warning("Unable to connect: %s", str(e))
                sleep(2)
                continue
            logging.info("Connected")

        line = fp.readline()
        if not line:
            log("We have replayed the entire file, starting over again")
            fp.close()
            fp = None
            continue

        if line.startswith("$GPRMC"):
            now = time()
            if not last_GPRMC:
                last_GPRMC = now
            else:
                next_event_in = last_GPRMC - now + (1.0 / args.speed)
                last_GPRMC = now
                if next_event_in > 0:
                    #log("Sleeping for %f secs. (pacing)" % next_event_in)
                    sleep(next_event_in)

        try:
            sock.send(line.encode("ascii") + b"\r\n")
        except socket.error as e:
            logging.error("send(): %s", str(e))
            sock = None
            sleep(1)

        if not args.quiet:
            sys.stdout.write(".")
            sys.stdout.flush()

        # we see about 5 sentences per GPRMC. Double that to make sure we
        # don't fall behind.
        sleep((1.0/ args.speed) / 10.0)


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    parser = argparse.ArgumentParser(description="%s - replay NMEA0183 files over TCP" % sys.argv[0])

    parser.add_argument("input", metavar="filename", help="Input file to replay")
    parser.add_argument("--speed", type=float, default=2.0, help="Replay speed factor. Default: 2.0")
    parser.add_argument("--skip", type=int, default=0, help="Skip this many bytes into the data file before starting.")

    parser.add_argument("--server-host", default="localhost", help="TCP server to replay to. Default: localhost")
    parser.add_argument("--server-port", type=int, default=10110, help="TCP server port to replay to. Default: 10110")

    parser.add_argument("--once", action="store_true", help="Disable continuous operation, only play back once.")
    parser.add_argument("--quiet", action="store_true", help="Be quiet")

    if getenv("VIM"):
        sys.argv += ["../datasets/onsdagsregatta-2016-08-24.nmea.gz"]

    if len(sys.argv) == 0:
        parser.print_help()
        exit()
    args = parser.parse_args()

    try:
        main(args)
    except KeyboardInterrupt:
        pass
